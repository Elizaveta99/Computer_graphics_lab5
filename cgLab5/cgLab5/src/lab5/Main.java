/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab5;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Professional
 */
public class Main extends javax.swing.JFrame {

   private LiangBarskyAlgorithmPanel liangBarskyAlgorithmPanel;
   private SutherlandHodgmanAlgorithmPanel sutherlandHodgmanAlgorithmPanel;
   private int type;
     
    public Main() {
        initComponents();
        type = 0;
        setLocationRelativeTo(null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ClippingAlgorithms");
        setPreferredSize(new java.awt.Dimension(730, 550));
        setResizable(false);
        setSize(new java.awt.Dimension(730, 550));

        jRadioButton1.setText("Liang-Barsky algorithm");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose algorithm: ");

        jRadioButton2.setText("Sutherlandâ€“Hodgman Algorithm");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Choose file with coordinates: ");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("CLIP");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(400, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        type = 1;
        jRadioButton2.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        type = 2;
        jRadioButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File workingDirectory = new File(System.getProperty("user.dir"));
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(workingDirectory);
        chooser.showOpenDialog(this);
        File file = chooser.getSelectedFile();
        Scanner scanner = null;
        if (file != null) 
        {
            if (type == 2) 
            {
                try {
                    scanner = new Scanner(file.toPath());
                    int n = scanner.nextInt();
                    SutherlandHodgmanAlgorithmPanel.subject.clear();
                    SutherlandHodgmanAlgorithmPanel.clipper.clear();
                    SutherlandHodgmanAlgorithmPanel.result.clear();

                    for (int i = 0; i < n; i++) 
                    {
                      Point2D temp = new Point2D(scanner.nextDouble() * 25, scanner.nextDouble() * 25);
                      SutherlandHodgmanAlgorithmPanel.subject.add(temp);
                      System.out.println(temp.getX() + " " + temp.getY());
                    }

                    n = scanner.nextInt();

                    for (int i = 0; i < n; i++)
                    {
                      Point2D temp = new Point2D(scanner.nextDouble() * 25, scanner.nextDouble() * 25);
                      SutherlandHodgmanAlgorithmPanel.clipper.add(temp);
                      //SutherlandHodgmanAlgorithmPanel.setPoints();
                      System.out.println(temp.getX() + " " + temp.getY());
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            else if (type == 1) 
            {
                try {
                    scanner = new Scanner(file.toPath());
                    int n = scanner.nextInt();
                    LiangBarskyAlgorithmPanel.subject.clear();
                    LiangBarskyAlgorithmPanel.clipper.clear();
                    LiangBarskyAlgorithmPanel.result.clear();

                    for (int i = 0; i < n; i++)
                    {
                      Point4D temp = new Point4D(scanner.nextDouble() * 25, scanner.nextDouble() * 25, scanner.nextDouble() * 25, scanner.nextDouble() * 25);
                      LiangBarskyAlgorithmPanel.subject.add(temp);
                      //System.out.println(temp.getX1() + " " + temp.getY1() + " " + temp.getX2() + " " + temp.getY2());
                    }

                    n = scanner.nextInt();
                    //System.out.println("2-n " + n);

                    for (int i = 0; i < n; i++) 
                    {
                      Point2D temp = new Point2D(scanner.nextDouble() * 25, scanner.nextDouble() * 25);
                      LiangBarskyAlgorithmPanel.clipper.add(temp);


                      //System.out.println(temp.getX() + " " + temp.getY());
                    }
                    
                    LiangBarskyAlgorithmPanel.setPoints();
                
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    SutherlandHodgmanPanel panel;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        System.out.println(type);
        
        Container content = getContentPane();
        content.setLayout(new BorderLayout());
        if (type == 1) 
        {
            liangBarskyAlgorithmPanel = new LiangBarskyAlgorithmPanel();
            content.add(liangBarskyAlgorithmPanel, BorderLayout.CENTER);
        }
        else if (type == 2) 
        {
            content = getContentPane();
            content.setLayout(new BorderLayout());
            panel = new SutherlandHodgmanPanel();
            content.add(panel, BorderLayout.CENTER);
            setTitle("SutherlandHodgman");
            pack();
            setLocationRelativeTo(null);

        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    // End of variables declaration//GEN-END:variables
}
